<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nsai</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-26T07:39:14.274Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>宁尚义</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本站的搭建过程</title>
    <link href="http://yoursite.com/2018/12/26/title6/"/>
    <id>http://yoursite.com/2018/12/26/title6/</id>
    <published>2018-12-26T06:32:31.755Z</published>
    <updated>2018-12-26T07:39:14.274Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Hexo-——-快速、简洁且高效的博客框架"><a href="#Hexo-——-快速、简洁且高效的博客框架" class="headerlink" title="Hexo —— 快速、简洁且高效的博客框架"></a><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> —— 快速、简洁且高效的博客框架</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="1-超快速度"><a href="#1-超快速度" class="headerlink" title="1.超快速度"></a>1.超快速度</h2><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><h2 id="2-支持-Markdown"><a href="#2-支持-Markdown" class="headerlink" title="2.支持 Markdown"></a>2.支持 Markdown</h2><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p><h2 id="3-一键部署"><a href="#3-一键部署" class="headerlink" title="3.一键部署"></a>3.一键部署</h2><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p><h2 id="4-丰富的插件"><a href="#4-丰富的插件" class="headerlink" title="4.丰富的插件"></a>4.丰富的插件</h2><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p><hr><h1 id="Node-js-——-是一个基于-Chrome-V8-引擎的-JavaScript-运行环境。"><a href="#Node-js-——-是一个基于-Chrome-V8-引擎的-JavaScript-运行环境。" class="headerlink" title="Node.js —— 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。"></a><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> —— 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</h1><h6 id="Node-js-使用了一个事件驱动、非阻塞式-I-O-的模型，使其轻量又高效。"><a href="#Node-js-使用了一个事件驱动、非阻塞式-I-O-的模型，使其轻量又高效。" class="headerlink" title="Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。"></a>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</h6><p>Node.js是一个Javascript运行环境(runtime environment)，发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。Node.js 不是一个 JavaScript 框架，不同于CakePHP、Django、Rails。Node.js 更不是浏览器端的库，不能与 jQuery、ExtJS 相提并论。Node.js 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。 </p><p>Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动，非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p><hr><h1 id="git-——-分布式版本控制系统"><a href="#git-——-分布式版本控制系统" class="headerlink" title="git —— 分布式版本控制系统"></a><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> —— 分布式版本控制系统</h1><h6 id="Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git-是-Linus-Torvalds-为了帮助管理-Linux-内核开发而开发的一个开放源码的版本控制软件。"><a href="#Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git-是-Linus-Torvalds-为了帮助管理-Linux-内核开发而开发的一个开放源码的版本控制软件。" class="headerlink" title="Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。"></a>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</h6><p>Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows. </p><hr><h1 id="NexT-——-Elegant-Theme-for-Hexo-精于心，简于形"><a href="#NexT-——-Elegant-Theme-for-Hexo-精于心，简于形" class="headerlink" title="NexT —— Elegant Theme for Hexo (精于心，简于形)"></a><a href="theme-next.iissnan.com/">NexT</a> —— Elegant Theme for Hexo (精于心，简于形)</h1><h2 id="1-主题配置"><a href="#1-主题配置" class="headerlink" title="1.主题配置"></a>1.主题配置</h2><p>NexT 坚持将复杂的细节隐藏，提供尽量少并且简便的设置，保持最大限度的易用性。</p><h2 id="2-第三方服务集成"><a href="#2-第三方服务集成" class="headerlink" title="2.第三方服务集成"></a>2.第三方服务集成</h2><p>使用 第三方服务 来扩展站点的功能， NexT 支持多种常见第三方服务。</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><h4 id="来必力-https-www-livere-com"><a href="#来必力-https-www-livere-com" class="headerlink" title="来必力(https://www.livere.com)"></a><a href="https://www.livere.com" target="_blank" rel="noopener">来必力(https://www.livere.com)</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: MTAyMC80MTgyMS8xODM2Nw==</span><br></pre></td></tr></table></figure><h3 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h3><h4 id="百度统计-https-tongji-baidu-com-web-welcome-login"><a href="#百度统计-https-tongji-baidu-com-web-welcome-login" class="headerlink" title="百度统计(https://tongji.baidu.com/web/welcome/login)"></a><a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计(https://tongji.baidu.com/web/welcome/login)</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Baidu Analytics ID</span><br><span class="line">baidu_analytics: 05b9e90829bd8b83641409c77e41d36a</span><br></pre></td></tr></table></figure><h4 id="阅读次数统计（LeanCloud"><a href="#阅读次数统计（LeanCloud" class="headerlink" title="阅读次数统计（LeanCloud)"></a><a href="https://leancloud.cn" target="_blank" rel="noopener">阅读次数统计（LeanCloud)</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: 0Bkl73pRei0NBwLm1JnzAagz-gzGzoHsz</span><br><span class="line">  app_key: QjEOooUCUuj2kvBUlrlRP1gt</span><br></pre></td></tr></table></figure><h3 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h3><h4 id="JiaThis-http-www-jiathis-com"><a href="#JiaThis-http-www-jiathis-com" class="headerlink" title="JiaThis(http://www.jiathis.com)"></a><a href="http://www.jiathis.com/" target="_blank" rel="noopener">JiaThis(http://www.jiathis.com)</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Share</span><br><span class="line"># This plugin is more useful in China, make sure you known how to use it.</span><br><span class="line"># And you can find the use guide at official webiste: http://www.jiathis.com/.</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">  jiathis: true</span><br><span class="line">  ##uid: Get this uid from http://www.jiathis.com/</span><br></pre></td></tr></table></figure><h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><h4 id="Local-Search-https-github-com-flashlab-hexo-generator-search"><a href="#Local-Search-https-github-com-flashlab-hexo-generator-search" class="headerlink" title="Local Search(https://github.com/flashlab/hexo-generator-search)"></a><a href="https://github.com/flashlab/hexo-generator-search" target="_blank" rel="noopener">Local Search(https://github.com/flashlab/hexo-generator-search)</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h2 id="3-内置标签"><a href="#3-内置标签" class="headerlink" title="3.内置标签"></a>3.内置标签</h2><p>除了 Markdown 支持的语法之外，NexT 借助 Hexo 提供的标签特性， 为您提供在书写文档时快速插入带特殊样式的内容。</p><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h2><p>NexT 使用中常见的问题。当您在使用中有疑问的时候，不妨先来这里看看。 或者在这里分享您在使用过程中碰到的问题。</p><hr><h1 id="GitHub-——-是一个面向开源及私有软件项目的托管平台"><a href="#GitHub-——-是一个面向开源及私有软件项目的托管平台" class="headerlink" title="GitHub —— 是一个面向开源及私有软件项目的托管平台"></a><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> —— 是一个面向开源及私有软件项目的托管平台</h1><h6 id="gitHub因为只支持git作为唯一的版本库格式进行托管，故名gitHub。"><a href="#gitHub因为只支持git作为唯一的版本库格式进行托管，故名gitHub。" class="headerlink" title="gitHub因为只支持git作为唯一的版本库格式进行托管，故名gitHub。"></a>gitHub因为只支持git作为唯一的版本库格式进行托管，故名gitHub。</h6><p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。</p><p>如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份复制出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。</p><p>GitHub可以托管各种git库，并提供一个web界面，但它与外国的SourceForge、Google Code或中国的coding的服务不同，GitHub的独特卖点在于从另外一个项目进行分支的简易性。为一个项目贡献代码非常简单：首先点击项目站点的“fork”的按钮，然后将代码检出并将修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。已经有人将GitHub称为代码玩家的MySpace。</p><p>在GitHub进行分支就像在Myspace（或Facebook…）进行交友一样，在社会关系图的节点中不断的连线。</p><p>GitHub项目本身自然而然的也在GitHub上进行托管，只不过在一个私有的，公共视图不可见的库中。开源项目可以免费托管，但私有库则并不如此。Chris Wanstrath，GitHub的开发者之一，肯定了通过付费的私有库来在财务上支持免费库的托管这一计划。</p><p>是的，我们正是这么计划的。通过与客户的接洽，开发FamSpam，甚至是开发GitHub本身，GitHub的私有库已经被证明了物有所值。任何希望节省时间并希望和团队其它成员一样远离页面频繁转换之苦的人士都会从GitHub中获得他们真正想要的价值。</p><p>在GitHub，用户可以十分轻易地找到海量的开源代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Hexo-——-快速、简洁且高效的博客框架&quot;&gt;&lt;a href=&quot;#Hexo-——-快速、简洁且高效的博客框架&quot; class=&quot;headerlink&quot; title=&quot;Hexo —— 快速、简洁且高效的博客框架&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://h
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令笔记</title>
    <link href="http://yoursite.com/2018/12/25/title5/"/>
    <id>http://yoursite.com/2018/12/25/title5/</id>
    <published>2018-12-25T11:15:47.714Z</published>
    <updated>2018-12-26T03:19:08.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装  </span></span><br><span class="line">npm update hexo -g <span class="comment">#升级  </span></span><br><span class="line">hexo init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure><h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure><h1 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h1><p>两个命令的作用是相同的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo &quot;My Gallery&quot;</span><br><span class="line">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">layout</td><td style="text-align:left">布局</td></tr><tr><td style="text-align:left">title</td><td style="text-align:left">标题</td></tr><tr><td style="text-align:left">date</td><td style="text-align:left">文件建立日期</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure><h1 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">layout</td><td style="text-align:left">布局</td></tr><tr><td style="text-align:left">title</td><td style="text-align:left">标题</td></tr><tr><td style="text-align:left">date</td><td style="text-align:left">文件建立日期</td></tr></tbody></table><h1 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要 &lt;!--more--&gt; 以下是余下全文</span><br></pre></td></tr></table></figure><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;title&gt;</span><br><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">:title</td><td style="text-align:left">标题</td></tr><tr><td style="text-align:left">:year</td><td style="text-align:left">建立的年份（4 位数）</td></tr><tr><td style="text-align:left">:month</td><td style="text-align:left">建立的月份（2 位数）</td></tr><tr><td style="text-align:left">:i_month</td><td style="text-align:left">建立的月份（去掉开头的零）</td></tr><tr><td style="text-align:left">:day</td><td style="text-align:left">建立的日期（2 位数）</td></tr><tr><td style="text-align:left">:i_day</td><td style="text-align:left">建立的日期（去掉开头的零）</td></tr></tbody></table><h1 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n #写文章</span><br><span class="line">hexo g #生成</span><br><span class="line">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="1-找不到git部署"><a href="#1-找不到git部署" class="headerlink" title="1.找不到git部署"></a>1.找不到git部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="3-部署类型设置git"><a href="#3-部署类型设置git" class="headerlink" title="3.部署类型设置git"></a>3.部署类型设置git</h2><p>hexo 3.0 部署类型不再是github，_config.yml 中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@***.github.com:***/***.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="4-xcodebuild"><a href="#4-xcodebuild" class="headerlink" title="4. xcodebuild"></a>4. xcodebuild</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/</span><br><span class="line">Library/Developer/CommandLineTools&apos; is a command line tools instance</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bcrypt</span><br></pre></td></tr></table></figure><h2 id="5-RSS不显示"><a href="#5-RSS不显示" class="headerlink" title="5. RSS不显示"></a>5. RSS不显示</h2><h3 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h3><p>编辑hexo/_config.yml，添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml #rss地址  默认即可</span><br></pre></td></tr></table></figure><h3 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h3><p>我使用多说代替自带的评论，在多说 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name </p><p>1.在根目录 _config.yml 添加一行 disqus_shortname: jslite 是在多说注册时产生的</p><p>2.复制到 themes\landscape\layout_partial\article.ejs</p><p>把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">&lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">&lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">  &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.disqus_shortname %&gt;&apos;&#125;;</span><br><span class="line">      (function() &#123;</span><br><span class="line">        var ds = document.createElement(&apos;script&apos;);</span><br><span class="line">        ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class="line">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class="line">        ds.charset = &apos;UTF-8&apos;;</span><br><span class="line">        (document.getElementsByTagName(&apos;head&apos;)[0] </span><br><span class="line">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class="line">      &#125;)();</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2018最新Web前端经典面试试题及答案（4）</title>
    <link href="http://yoursite.com/2018/12/24/title4/"/>
    <id>http://yoursite.com/2018/12/24/title4/</id>
    <published>2018-12-24T07:34:30.687Z</published>
    <updated>2018-12-25T06:03:25.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript面向对象中继承实现？"><a href="#javascript面向对象中继承实现？" class="headerlink" title="javascript面向对象中继承实现？"></a>javascript面向对象中继承实现？</h2><p>面向对象的基本特征有：封闭、继承、多态。</p><p>在JavaScript中实现继承的方法：</p><ol><li><p>原型链（prototype chaining）</p></li><li><p>call()/apply()</p></li><li><p>混合方式(prototype和call()/apply()结合)</p></li><li><p>对象冒充</p></li></ol><p>继承的方法如下：</p><p>1、prototype原型链方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> teacher(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">teacher.prototype.sayName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"name is "</span>+this.name);</span><br><span class="line">&#125;</span><br><span class="line">var teacher1 = new teacher(<span class="string">"xiaoming"</span>);</span><br><span class="line">teacher1.sayName();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> student(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">student.prototype = new teacher()</span><br><span class="line">var student1 = new student(<span class="string">"xiaolan"</span>);</span><br><span class="line">student1.sayName();</span><br><span class="line">//  name is xiaoming</span><br><span class="line">//  name is xiaolan</span><br></pre></td></tr></table></figure><p>2、call()/apply()方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> teacher(name,age)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.sayhi = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">alert(<span class="string">'name:'</span>+name+<span class="string">", age:"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">student</span></span>()&#123;</span><br><span class="line">var args = arguments;</span><br><span class="line">teacher.call(this,args[0],args[1]);</span><br><span class="line">// teacher.apply(this,arguments);</span><br><span class="line">&#125;</span><br><span class="line">var teacher1 = new teacher(<span class="string">'xiaoming'</span>,23);</span><br><span class="line">teacher1.sayhi();</span><br><span class="line"></span><br><span class="line">var student1 = new student(<span class="string">'xiaolan'</span>,12);</span><br><span class="line">student1.sayhi();</span><br><span class="line"></span><br><span class="line">// alert: name:xiaoming, age:23</span><br><span class="line">// alert: name:xiaolan, age:12</span><br></pre></td></tr></table></figure><p>3、混合方法【prototype,call/apply】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> teacher(name,age)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">teacher.prototype.sayName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">'name:'</span>+this.name);</span><br><span class="line">&#125;</span><br><span class="line">teacher.prototype.sayAge = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">'age:'</span>+this.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">student</span></span>()&#123;</span><br><span class="line">var args = arguments;</span><br><span class="line">teacher.call(this,args[0],args[1]);</span><br><span class="line">&#125;</span><br><span class="line">student.prototype = new teacher();</span><br><span class="line"></span><br><span class="line">var student1 = new student(<span class="string">'xiaolin'</span>,23);</span><br><span class="line">student1.sayName();</span><br><span class="line">student1.sayAge();</span><br><span class="line">// name:xiaolin</span><br><span class="line">// age:23</span><br></pre></td></tr></table></figure><p>4、对象冒充</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name,age)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.show = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(this.name+<span class="string">", "</span>+this.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Student(name,age)&#123;</span><br><span class="line">this.student = Person; //将Person类的构造函数赋值给this.student</span><br><span class="line">this.student(name,age); //js中实际上是通过对象冒充来实现继承的</span><br><span class="line">delete this.student; //移除对Person的引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s = new Student(<span class="string">"小明"</span>,17);</span><br><span class="line">s.show();</span><br><span class="line"></span><br><span class="line">var p = new Person(<span class="string">"小花"</span>,18);</span><br><span class="line">p.show();</span><br><span class="line">// 小明, 17</span><br><span class="line">// 小花, 18</span><br></pre></td></tr></table></figure><h2 id="javascript相关程序计算题"><a href="#javascript相关程序计算题" class="headerlink" title="javascript相关程序计算题"></a>javascript相关程序计算题</h2><h3 id="1、判断一个字符串中出现次数最多的字符，统计这个次数"><a href="#1、判断一个字符串中出现次数最多的字符，统计这个次数" class="headerlink" title="1、判断一个字符串中出现次数最多的字符，统计这个次数"></a>1、判断一个字符串中出现次数最多的字符，统计这个次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">'asdfssaaasasasasaa'</span>;</span><br><span class="line">var json = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!json[str.charAt(i)])&#123;</span><br><span class="line">       json[str.charAt(i)] = 1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       json[str.charAt(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var iMax = 0;</span><br><span class="line">var iIndex = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(var i <span class="keyword">in</span> json)&#123;</span><br><span class="line">    <span class="keyword">if</span>(json[i]&gt;iMax)&#123;</span><br><span class="line">         iMax = json[i];</span><br><span class="line">         iIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br><span class="line">console.log(<span class="string">'出现次数最多的是:'</span>+iIndex+<span class="string">'出现'</span>+iMax+<span class="string">'次'</span>);</span><br></pre></td></tr></table></figure><p>结果如下：出现次数最多的是:a出现9次</p><h2 id="JavaScript-数组-Array-对象"><a href="#JavaScript-数组-Array-对象" class="headerlink" title="JavaScript 数组(Array)对象"></a>JavaScript 数组(Array)对象</h2><h3 id="1、Array相关的属性和方法"><a href="#1、Array相关的属性和方法" class="headerlink" title="1、Array相关的属性和方法"></a>1、Array相关的属性和方法</h3><p>这里只是做了相关的列举，具体的使用方法，请<a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">参考网址</a>。</p><h4 id="Array-对象属性"><a href="#Array-对象属性" class="headerlink" title="Array 对象属性"></a>Array 对象属性</h4><p>constructor 返回对创建此对象的数组函数的引用。</p><p>length 设置或返回数组中元素的数目。</p><p>prototype 使您有能力向对象添加属性和方法。</p><h4 id="Array-对象方法"><a href="#Array-对象方法" class="headerlink" title="Array 对象方法"></a>Array 对象方法</h4><p>concat() 连接两个或更多的数组，并返回结果。</p><p>join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p><p>pop() 删除并返回数组的最后一个元素。  </p><p>shift() 删除并返回数组的第一个元素</p><p>push() 向数组的末尾添加一个或更多元素，并返回新的长度。</p><p>unshift() 向数组的开头添加一个或更多元素，并返回新的长度。</p><p>reverse() 颠倒数组中元素的顺序。</p><p>slice() 从某个已有的数组返回选定的元素</p><p>sort() 对数组的元素进行排序</p><p>splice() 删除元素，并向数组添加新元素。</p><p>toSource() 返回该对象的源代码。</p><p>toString() 把数组转换为字符串，并返回结果。</p><p>toLocaleString() 把数组转换为本地数组，并返回结果。</p><p>valueOf() 返回数组对象的原始值</p><h3 id="2、编写一个方法-去掉一个数组的重复元素"><a href="#2、编写一个方法-去掉一个数组的重复元素" class="headerlink" title="2、编写一个方法 去掉一个数组的重复元素"></a>2、编写一个方法 去掉一个数组的重复元素</h3><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0,2,3,4,4,0,2];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">var tmp = [];</span><br><span class="line"><span class="keyword">for</span>(var i = 0 ;i&lt; arr.length;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>( !obj[arr[i]] )&#123;</span><br><span class="line">      obj[arr[i]] = 1;</span><br><span class="line">      tmp.push(arr[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(tmp);</span><br></pre></td></tr></table></figure><p>结果如下： [0, 2, 3, 4]</p><p> 方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,3,4,4,5,2,3,6],</span><br><span class="line">   arr2 = [];</span><br><span class="line"><span class="keyword">for</span>(var i = 0;i&lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr2.indexOf(arr[i]) &lt; 0)&#123;</span><br><span class="line">        arr2.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p>结果为：[2, 3, 4, 5, 6]</p><p> 方法三：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [2,3,4,4,5,2,3,6];</span><br><span class="line">var arr2 = arr.filter(<span class="keyword">function</span>(element,index,self)&#123;</span><br><span class="line"><span class="built_in">return</span> self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><p>结果为：[2, 3, 4, 5, 6]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;javascript面向对象中继承实现？&quot;&gt;&lt;a href=&quot;#javascript面向对象中继承实现？&quot; class=&quot;headerlink&quot; title=&quot;javascript面向对象中继承实现？&quot;&gt;&lt;/a&gt;javascript面向对象中继承实现？&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2018最新Web前端经典面试试题及答案（3）</title>
    <link href="http://yoursite.com/2018/12/24/title3/"/>
    <id>http://yoursite.com/2018/12/24/title3/</id>
    <published>2018-12-24T07:22:13.524Z</published>
    <updated>2018-12-25T06:03:12.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何理解闭包？"><a href="#如何理解闭包？" class="headerlink" title="如何理解闭包？"></a>如何理解闭包？</h2><p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。</p><p>2、表现形式：使函数外部能够调用函数内部定义的变量。</p><p>3、实例如下：</p><p>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var count=10;   //全局作用域 标记为flag1</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">    var count=0;    //函数全局作用域 标记为flag2</span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        count+=1;   //函数的内部作用域</span><br><span class="line">        alert(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var s = add()</span><br><span class="line">s();//输出1</span><br><span class="line">s();//输出2</span><br></pre></td></tr></table></figure><p>4、变量的作用域</p><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p><p>变量的作用域分类：全局变量和局部变量。</p><p>特点：</p><p>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。</p><p>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p><p> 5、使用闭包的注意点</p><p>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h2 id="什么是跨域？跨域请求资源的方法有哪些？"><a href="#什么是跨域？跨域请求资源的方法有哪些？" class="headerlink" title="什么是跨域？跨域请求资源的方法有哪些？"></a>什么是跨域？跨域请求资源的方法有哪些？</h2><h3 id="1、什么是跨域？"><a href="#1、什么是跨域？" class="headerlink" title="1、什么是跨域？"></a>1、什么是跨域？</h3><p>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：</p><p>网络协议不同，如http协议访问https协议。</p><p>端口不同，如80端口访问8080端口。</p><p>域名不同，如qianduanblog.com访问baidu.com。</p><p>子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。</p><p>域名和域名对应ip,如<a href="http://www.a.com访问20.205.28.90" target="_blank" rel="noopener">www.a.com访问20.205.28.90</a>.</p><h3 id="2、跨域请求资源的方法："><a href="#2、跨域请求资源的方法：" class="headerlink" title="2、跨域请求资源的方法："></a>2、跨域请求资源的方法：</h3><h4 id="1-、porxy代理"><a href="#1-、porxy代理" class="headerlink" title="(1)、porxy代理"></a>(1)、porxy代理</h4><p>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。</p><p>实现方法：通过nginx代理；</p><p>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。</p><h4 id="2-、CORS-【Cross-Origin-Resource-Sharing】"><a href="#2-、CORS-【Cross-Origin-Resource-Sharing】" class="headerlink" title="(2)、CORS 【Cross-Origin Resource Sharing】"></a>(2)、CORS 【Cross-Origin Resource Sharing】</h4><p>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。</p><p>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res.writeHead(200, &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"text/html; charset=UTF-8"</span>,</span><br><span class="line">    <span class="string">"Access-Control-Allow-Origin"</span>:<span class="string">'http://localhost'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'GET, POST, OPTIONS'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Requested-With, Content-Type'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-、jsonp"><a href="#3-、jsonp" class="headerlink" title="(3)、jsonp"></a>(3)、jsonp</h4><p>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。</p><p>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。</p><p>实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> testjsonp(data) &#123;</span><br><span class="line">       console.log(data.name); // 获取返回的结果</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var _script = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">    _script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    _script.src = <span class="string">"http://localhost:8888/jsonp?callback=testjsonp"</span>;</span><br><span class="line">    document.head.appendChild(_script);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>缺点：</p><p>　　1、这种方式无法发送post请求（这里）</p><p>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。</p><h2 id="谈谈垃圾回收机制方式及内存管理"><a href="#谈谈垃圾回收机制方式及内存管理" class="headerlink" title="谈谈垃圾回收机制方式及内存管理"></a>谈谈垃圾回收机制方式及内存管理</h2><h3 id="回收机制方式"><a href="#回收机制方式" class="headerlink" title="回收机制方式"></a>回收机制方式</h3><p>1、定义和用法：垃圾回收机制(GC:Garbage Collection),执行环境负责管理代码执行过程中使用的内存。</p><p>2、原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p><p>3、实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>() &#123;</span><br><span class="line">    var obj = &#123;name: <span class="string">'hanzichi'</span>, age: 10&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn2</span></span>() &#123;</span><br><span class="line">    var obj = &#123;name:<span class="string">'hanzichi'</span>, age: 10&#125;;</span><br><span class="line">   <span class="built_in">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">var a = fn1();</span><br><span class="line">var b = fn2();</span><br></pre></td></tr></table></figure><p>fn1中定义的obj为局部变量，而当调用结束后，出了fn1的环境，那么该块内存会被js引擎中的垃圾回收器自动释放；在fn2被调用的过程中，返回的对象被全局变量b所指向，所以该块内存并不会被释放。</p><p> 4、垃圾回收策略：标记清除(较为常用)和引用计数。</p><h3 id="标记清除："><a href="#标记清除：" class="headerlink" title="标记清除："></a>标记清除：</h3><p>　　定义和用法：当变量进入环境时，将变量标记”进入环境”，当变量离开环境时，标记为：”离开环境”。某一个时刻，垃圾回收器会过滤掉环境中的变量，以及被环境变量引用的变量，剩下的就是被视为准备回收的变量。</p><p>　　到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</p><p>引用计数：</p><p>　　定义和用法：引用计数是跟踪记录每个值被引用的次数。</p><p>　　基本原理：就是变量的引用次数，被引用一次则加1，当这个引用计数为0时，被视为准备回收的对象。</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>1、什么时候触发垃圾回收？</p><p>垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。</p><p>IE6的垃圾回收是根据内存分配量运行的，当环境中的变量，对象，字符串达到一定数量时触发垃圾回收。垃圾回收器一直处于工作状态，严重影响浏览器性能。</p><p>IE7中，垃圾回收器会根据内存分配量与程序占用内存的比例进行动态调整，开始回收工作。</p><p>2、合理的GC方案：(1)、遍历所有可访问的对象; (2)、回收已不可访问的对象。</p><p>3、GC缺陷：(1)、停止响应其他操作；</p><p>4、GC优化策略：(1)、分代回收（Generation GC）;(2)、增量GC</p><h3 id="开发过程中遇到的内存泄露情况，如何解决的？"><a href="#开发过程中遇到的内存泄露情况，如何解决的？" class="headerlink" title="开发过程中遇到的内存泄露情况，如何解决的？"></a>开发过程中遇到的内存泄露情况，如何解决的？</h3><p>1、定义和用法：</p><p>内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。C#和Java等语言采用了自动垃圾回收方法管理内存，几乎不会发生内存泄露。我们知道，浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有bug，会产生内存泄露。</p><p>2、内存泄露的几种情况:</p><p>(1)、当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在IE中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄露。</p><p>实例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"Click me"</span> id=<span class="string">"myBtn"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    var btn = document.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">"Processing..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解决方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"myDiv"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"Click me"</span> id=<span class="string">"myBtn"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    var btn = document.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    btn.onclick = null;</span><br><span class="line">        document.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">"Processing..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>(2)、由于是函数内定义函数，并且内部函数–事件回调的引用外暴了，形成了闭包。闭包可以维持函数内局部变量，使其得不到释放。<br>实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bindEvent</span></span>()&#123;</span><br><span class="line">    var obj=document.createElement(<span class="string">"XXX"</span>);</span><br><span class="line">    obj.onclick=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        //Even <span class="keyword">if</span> it<span class="string">'s a empty function</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>解决方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bindEvent</span></span>()&#123;</span><br><span class="line">    var obj=document.createElement(<span class="string">"XXX"</span>);</span><br><span class="line">    obj.onclick=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">         //Even <span class="keyword">if</span> it<span class="string">'s a empty function</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    obj=null;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何理解闭包？&quot;&gt;&lt;a href=&quot;#如何理解闭包？&quot; class=&quot;headerlink&quot; title=&quot;如何理解闭包？&quot;&gt;&lt;/a&gt;如何理解闭包？&lt;/h2&gt;&lt;p&gt;1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2018最新Web前端经典面试试题及答案（2）</title>
    <link href="http://yoursite.com/2018/12/24/title2/"/>
    <id>http://yoursite.com/2018/12/24/title2/</id>
    <published>2018-12-24T07:07:22.489Z</published>
    <updated>2018-12-25T06:02:35.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js-字符串操作函数"><a href="#js-字符串操作函数" class="headerlink" title="js 字符串操作函数"></a>js 字符串操作函数</h2><p>我这里只是列举了常用的字符串函数，具体使用方法，请<a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">参考网址</a>。</p><p>concat() – 将两个或多个字符的文本组合起来，返回一个新的字符串。</p><p>indexOf() – 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1 。</p><p>charAt() – 返回指定位置的字符。</p><p>lastIndexOf() – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。</p><p>match() – 检查一个字符串是否匹配一个正则表达式。</p><p>substr() 函数 – 返回从string的startPos位置，长度为length的字符串</p><p>substring() – 返回字符串的一个子串。传入参数是起始位置和结束位置。</p><p>slice() – 提取字符串的一部分，并返回一个新字符串。</p><p>replace() – 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。</p><p>search() – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。</p><p>split() – 通过将字符串划分成子串，将一个字符串做成一个字符串数组。</p><p>length – 返回字符串的长度，所谓字符串的长度是指其包含的字符的个数。</p><p>toLowerCase() – 将整个字符串转成小写字母。</p><p>toUpperCase() – 将整个字符串转成大写字母。</p><h2 id="怎样添加、移除、移动、复制、创建和查找节点？"><a href="#怎样添加、移除、移动、复制、创建和查找节点？" class="headerlink" title="怎样添加、移除、移动、复制、创建和查找节点？"></a>怎样添加、移除、移动、复制、创建和查找节点？</h2><h3 id="1）创建新节点"><a href="#1）创建新节点" class="headerlink" title="1）创建新节点"></a>1）创建新节点</h3><p>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点</p><h3 id="2）添加、移除、替换、插入"><a href="#2）添加、移除、替换、插入" class="headerlink" title="2）添加、移除、替换、插入"></a>2）添加、移除、替换、插入</h3><p>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入</p><h3 id="3）查找"><a href="#3）查找" class="headerlink" title="3）查找"></a>3）查找</h3><p>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性</p><h2 id="写出3个使用this的典型应用"><a href="#写出3个使用this的典型应用" class="headerlink" title="写出3个使用this的典型应用"></a>写出3个使用this的典型应用</h2><h3 id="（1）、在html元素事件属性中使用，如："><a href="#（1）、在html元素事件属性中使用，如：" class="headerlink" title="（1）、在html元素事件属性中使用，如："></a>（1）、在html元素事件属性中使用，如：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=”button” onclick=”showInfo(this);” value=”点击一下”/&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）、构造函数"><a href="#（2）、构造函数" class="headerlink" title="（2）、构造函数"></a>（2）、构造函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Animal(name, color) &#123;</span><br><span class="line">　　this.name = name;</span><br><span class="line">　　this.color = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）、input点击，获取值"><a href="#（3）、input点击，获取值" class="headerlink" title="（3）、input点击，获取值"></a>（3）、input点击，获取值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">"text"</span> value=<span class="string">"点击一下"</span> /&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    var btn = document.getElementById(<span class="string">"text"</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        alert(this.value);    //此处的this是按钮元素</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="（4）、apply-call-求数组最值"><a href="#（4）、apply-call-求数组最值" class="headerlink" title="（4）、apply()/call()求数组最值"></a>（4）、apply()/call()求数组最值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var  numbers = [5, 458 , 120 , -215 ]; </span><br><span class="line">var  maxInNumbers = Math.max.apply(this, numbers);  </span><br><span class="line">console.log(maxInNumbers);  // 458</span><br><span class="line">var maxInNumbers = Math.max.call(this,5, 458 , 120 , -215); </span><br><span class="line">console.log(maxInNumbers);  // 458</span><br></pre></td></tr></table></figure><h2 id="比较typeof与instanceof？"><a href="#比较typeof与instanceof？" class="headerlink" title="比较typeof与instanceof？"></a>比较typeof与instanceof？</h2><p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。</p><p>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。</p><p>细节：</p><p>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。</p><p>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!=”undefined”){alert(“ok”)}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。</p><p>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。</p><p>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。</p><p>实例演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a instanceof b?alert(<span class="string">"true"</span>):alert(<span class="string">"false"</span>); //a是b的实例？真:假</span><br><span class="line"></span><br><span class="line">var a = new Array(); </span><br><span class="line">alert(a instanceof Array);  // <span class="literal">true</span></span><br><span class="line">alert(a instanceof Object)  // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;&#125;;</span><br><span class="line">var a = new <span class="built_in">test</span>();</span><br><span class="line">alert(a instanceof <span class="built_in">test</span>)   // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>细节：</p><p>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (window instanceof Object)&#123; alert(<span class="string">'Y'</span>)&#125; <span class="keyword">else</span> &#123;  alert(<span class="string">'N'</span>);&#125;  // <span class="string">'N'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js-字符串操作函数&quot;&gt;&lt;a href=&quot;#js-字符串操作函数&quot; class=&quot;headerlink&quot; title=&quot;js 字符串操作函数&quot;&gt;&lt;/a&gt;js 字符串操作函数&lt;/h2&gt;&lt;p&gt;我这里只是列举了常用的字符串函数，具体使用方法，请&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2018最新Web前端经典面试试题及答案（1）</title>
    <link href="http://yoursite.com/2018/12/24/title1/"/>
    <id>http://yoursite.com/2018/12/24/title1/</id>
    <published>2018-12-24T06:53:52.314Z</published>
    <updated>2018-12-25T06:02:00.296Z</updated>
    
    <content type="html"><![CDATA[<p>本篇收录了一些面试中经常会遇到的经典面试题以及自己面试过程中遇到的一些问题，并且都给出了我在网上收集的答案。马上就要过春节了，开年就是崭新的一年，相信很多的前端开发者会有一些跳槽的悸动，通过对本篇知识的整理以及经验的总结，希望能帮到更多的前端面试者。（如有错误或更好的答案，欢迎指正，水平有限，望各位不吝指教。）</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript:"></a>JavaScript:</h1><h2 id="JavaScript中如何检测一个变量是一个String类型？请写出函数实现"><a href="#JavaScript中如何检测一个变量是一个String类型？请写出函数实现" class="headerlink" title="JavaScript中如何检测一个变量是一个String类型？请写出函数实现"></a>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof(obj) === <span class="string">"string"</span></span><br><span class="line">typeof obj === <span class="string">"string"</span></span><br><span class="line">obj.constructor === String</span><br></pre></td></tr></table></figure><h2 id="请用js去除字符串空格？"><a href="#请用js去除字符串空格？" class="headerlink" title="请用js去除字符串空格？"></a>请用js去除字符串空格？</h2><h3 id="方法一：使用replace正则匹配的方法"><a href="#方法一：使用replace正则匹配的方法" class="headerlink" title="方法一：使用replace正则匹配的方法"></a>方法一：使用replace正则匹配的方法</h3><p>去除所有空格: str = str.replace(/\s*/g,””);      </p><p>去除两头空格: str = str.replace(/^\s<em>|\s</em>$/g,””);</p><p>去除左空格： str = str.replace( /^\s*/, “”);</p><p>去除右空格： str = str.replace(/(\s*$)/g, “”);</p><p>str为要去除空格的字符串，实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">" 23 23 "</span>;</span><br><span class="line">var str2 = str.replace(/\s*/g,<span class="string">""</span>);</span><br><span class="line">console.log(str2); // 2323</span><br></pre></td></tr></table></figure><h3 id="方法二：使用str-trim-方法"><a href="#方法二：使用str-trim-方法" class="headerlink" title="方法二：使用str.trim()方法"></a>方法二：使用str.trim()方法</h3><p>str.trim()局限性：无法去除中间的空格，实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"   xiao  ming   "</span>;</span><br><span class="line">var str2 = str.trim();</span><br><span class="line">console.log(str2);   //xiao  ming</span><br></pre></td></tr></table></figure><p>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><h3 id="方法三：使用jquery-trim-str-方法"><a href="#方法三：使用jquery-trim-str-方法" class="headerlink" title="方法三：使用jquery,$.trim(str)方法"></a>方法三：使用jquery,$.trim(str)方法</h3><p>$.trim(str)局限性：无法去除中间的空格，实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"   xiao  ming   "</span>;</span><br><span class="line">var str2 = $.trim(str)</span><br><span class="line">console.log(str2);   //  xiao  ming</span><br></pre></td></tr></table></figure><h2 id="你如何获取浏览器URL中查询字符串中的参数？"><a href="#你如何获取浏览器URL中查询字符串中的参数？" class="headerlink" title="你如何获取浏览器URL中查询字符串中的参数？"></a>你如何获取浏览器URL中查询字符串中的参数？</h2><p>实例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">showWindowHref</span></span>()&#123;</span><br><span class="line">    var sHref = window.location.href;</span><br><span class="line">    var args = sHref.split(<span class="string">'?'</span>);</span><br><span class="line">    <span class="keyword">if</span>(args[0] == sHref)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    var arr = args[1].split(<span class="string">'&amp;'</span>);</span><br><span class="line">    var obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0;i&lt; arr.length;i++)&#123;</span><br><span class="line">        var arg = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">        obj[arg[0]] = arg[1];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">var href = showWindowHref(); // obj</span><br><span class="line">console.log(href[<span class="string">'name'</span>]); // xiaoming</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇收录了一些面试中经常会遇到的经典面试题以及自己面试过程中遇到的一些问题，并且都给出了我在网上收集的答案。马上就要过春节了，开年就是崭新的一年，相信很多的前端开发者会有一些跳槽的悸动，通过对本篇知识的整理以及经验的总结，希望能帮到更多的前端面试者。（如有错误或更好的答案，
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E8%AF%95%E9%A2%98/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/23/hello-world/"/>
    <id>http://yoursite.com/2018/12/23/hello-world/</id>
    <published>2018-12-23T08:18:19.374Z</published>
    <updated>2018-12-23T08:18:19.374Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
